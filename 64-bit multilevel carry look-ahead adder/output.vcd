$date
	Tue Mar 07 11:35:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 1 ! cout $end
$var wire 64 " sum [63:0] $end
$var reg 64 # a [63:0] $end
$var reg 64 $ b [63:0] $end
$var reg 1 % cin $end
$scope module inits $end
$var wire 64 & a [63:0] $end
$var wire 64 ' b [63:0] $end
$var wire 1 % cin $end
$var wire 1 ! cout $end
$var wire 64 ( sum [63:0] $end
$var wire 4 ) p [3:0] $end
$var wire 4 * g [3:0] $end
$var wire 3 + c [2:0] $end
$scope module ins1 $end
$var wire 16 , a [15:0] $end
$var wire 16 - b [15:0] $end
$var wire 3 . c [2:0] $end
$var wire 1 % cin $end
$var wire 1 / cout $end
$var wire 1 0 gout $end
$var wire 1 1 pout $end
$var wire 16 2 sum [15:0] $end
$var wire 4 3 p [3:0] $end
$var wire 4 4 g [3:0] $end
$scope module ins1 $end
$var wire 4 5 a [3:0] $end
$var wire 4 6 b [3:0] $end
$var wire 1 % cin $end
$var wire 1 7 cout $end
$var wire 4 8 g [3:0] $end
$var wire 1 9 gout $end
$var wire 4 : p [3:0] $end
$var wire 1 ; pout $end
$var wire 4 < sum [3:0] $end
$var wire 3 = c [2:0] $end
$upscope $end
$scope module ins2 $end
$var wire 4 > a [3:0] $end
$var wire 4 ? b [3:0] $end
$var wire 1 @ cin $end
$var wire 1 A cout $end
$var wire 4 B g [3:0] $end
$var wire 1 C gout $end
$var wire 4 D p [3:0] $end
$var wire 1 E pout $end
$var wire 4 F sum [3:0] $end
$var wire 3 G c [2:0] $end
$upscope $end
$scope module ins3 $end
$var wire 4 H a [3:0] $end
$var wire 4 I b [3:0] $end
$var wire 1 J cin $end
$var wire 1 K cout $end
$var wire 4 L g [3:0] $end
$var wire 1 M gout $end
$var wire 4 N p [3:0] $end
$var wire 1 O pout $end
$var wire 4 P sum [3:0] $end
$var wire 3 Q c [2:0] $end
$upscope $end
$scope module ins4 $end
$var wire 4 R a [3:0] $end
$var wire 4 S b [3:0] $end
$var wire 1 T cin $end
$var wire 1 / cout $end
$var wire 4 U g [3:0] $end
$var wire 1 V gout $end
$var wire 4 W p [3:0] $end
$var wire 1 X pout $end
$var wire 4 Y sum [3:0] $end
$var wire 3 Z c [2:0] $end
$upscope $end
$upscope $end
$scope module ins2 $end
$var wire 16 [ a [15:0] $end
$var wire 16 \ b [15:0] $end
$var wire 3 ] c [2:0] $end
$var wire 1 ^ cin $end
$var wire 1 _ cout $end
$var wire 1 ` gout $end
$var wire 1 a pout $end
$var wire 16 b sum [15:0] $end
$var wire 4 c p [3:0] $end
$var wire 4 d g [3:0] $end
$scope module ins1 $end
$var wire 4 e a [3:0] $end
$var wire 4 f b [3:0] $end
$var wire 1 ^ cin $end
$var wire 1 g cout $end
$var wire 4 h g [3:0] $end
$var wire 1 i gout $end
$var wire 4 j p [3:0] $end
$var wire 1 k pout $end
$var wire 4 l sum [3:0] $end
$var wire 3 m c [2:0] $end
$upscope $end
$scope module ins2 $end
$var wire 4 n a [3:0] $end
$var wire 4 o b [3:0] $end
$var wire 1 p cin $end
$var wire 1 q cout $end
$var wire 4 r g [3:0] $end
$var wire 1 s gout $end
$var wire 4 t p [3:0] $end
$var wire 1 u pout $end
$var wire 4 v sum [3:0] $end
$var wire 3 w c [2:0] $end
$upscope $end
$scope module ins3 $end
$var wire 4 x a [3:0] $end
$var wire 4 y b [3:0] $end
$var wire 1 z cin $end
$var wire 1 { cout $end
$var wire 4 | g [3:0] $end
$var wire 1 } gout $end
$var wire 4 ~ p [3:0] $end
$var wire 1 !" pout $end
$var wire 4 "" sum [3:0] $end
$var wire 3 #" c [2:0] $end
$upscope $end
$scope module ins4 $end
$var wire 4 $" a [3:0] $end
$var wire 4 %" b [3:0] $end
$var wire 1 &" cin $end
$var wire 1 _ cout $end
$var wire 4 '" g [3:0] $end
$var wire 1 (" gout $end
$var wire 4 )" p [3:0] $end
$var wire 1 *" pout $end
$var wire 4 +" sum [3:0] $end
$var wire 3 ," c [2:0] $end
$upscope $end
$upscope $end
$scope module ins3 $end
$var wire 16 -" a [15:0] $end
$var wire 16 ." b [15:0] $end
$var wire 3 /" c [2:0] $end
$var wire 1 0" cin $end
$var wire 1 1" cout $end
$var wire 1 2" gout $end
$var wire 1 3" pout $end
$var wire 16 4" sum [15:0] $end
$var wire 4 5" p [3:0] $end
$var wire 4 6" g [3:0] $end
$scope module ins1 $end
$var wire 4 7" a [3:0] $end
$var wire 4 8" b [3:0] $end
$var wire 1 0" cin $end
$var wire 1 9" cout $end
$var wire 4 :" g [3:0] $end
$var wire 1 ;" gout $end
$var wire 4 <" p [3:0] $end
$var wire 1 =" pout $end
$var wire 4 >" sum [3:0] $end
$var wire 3 ?" c [2:0] $end
$upscope $end
$scope module ins2 $end
$var wire 4 @" a [3:0] $end
$var wire 4 A" b [3:0] $end
$var wire 1 B" cin $end
$var wire 1 C" cout $end
$var wire 4 D" g [3:0] $end
$var wire 1 E" gout $end
$var wire 4 F" p [3:0] $end
$var wire 1 G" pout $end
$var wire 4 H" sum [3:0] $end
$var wire 3 I" c [2:0] $end
$upscope $end
$scope module ins3 $end
$var wire 4 J" a [3:0] $end
$var wire 4 K" b [3:0] $end
$var wire 1 L" cin $end
$var wire 1 M" cout $end
$var wire 4 N" g [3:0] $end
$var wire 1 O" gout $end
$var wire 4 P" p [3:0] $end
$var wire 1 Q" pout $end
$var wire 4 R" sum [3:0] $end
$var wire 3 S" c [2:0] $end
$upscope $end
$scope module ins4 $end
$var wire 4 T" a [3:0] $end
$var wire 4 U" b [3:0] $end
$var wire 1 V" cin $end
$var wire 1 1" cout $end
$var wire 4 W" g [3:0] $end
$var wire 1 X" gout $end
$var wire 4 Y" p [3:0] $end
$var wire 1 Z" pout $end
$var wire 4 [" sum [3:0] $end
$var wire 3 \" c [2:0] $end
$upscope $end
$upscope $end
$scope module ins4 $end
$var wire 16 ]" a [15:0] $end
$var wire 16 ^" b [15:0] $end
$var wire 3 _" c [2:0] $end
$var wire 1 `" cin $end
$var wire 1 ! cout $end
$var wire 1 a" gout $end
$var wire 1 b" pout $end
$var wire 16 c" sum [15:0] $end
$var wire 4 d" p [3:0] $end
$var wire 4 e" g [3:0] $end
$scope module ins1 $end
$var wire 4 f" a [3:0] $end
$var wire 4 g" b [3:0] $end
$var wire 1 `" cin $end
$var wire 1 h" cout $end
$var wire 4 i" g [3:0] $end
$var wire 1 j" gout $end
$var wire 4 k" p [3:0] $end
$var wire 1 l" pout $end
$var wire 4 m" sum [3:0] $end
$var wire 3 n" c [2:0] $end
$upscope $end
$scope module ins2 $end
$var wire 4 o" a [3:0] $end
$var wire 4 p" b [3:0] $end
$var wire 1 q" cin $end
$var wire 1 r" cout $end
$var wire 4 s" g [3:0] $end
$var wire 1 t" gout $end
$var wire 4 u" p [3:0] $end
$var wire 1 v" pout $end
$var wire 4 w" sum [3:0] $end
$var wire 3 x" c [2:0] $end
$upscope $end
$scope module ins3 $end
$var wire 4 y" a [3:0] $end
$var wire 4 z" b [3:0] $end
$var wire 1 {" cin $end
$var wire 1 |" cout $end
$var wire 4 }" g [3:0] $end
$var wire 1 ~" gout $end
$var wire 4 !# p [3:0] $end
$var wire 1 "# pout $end
$var wire 4 ## sum [3:0] $end
$var wire 3 $# c [2:0] $end
$upscope $end
$scope module ins4 $end
$var wire 4 %# a [3:0] $end
$var wire 4 &# b [3:0] $end
$var wire 1 '# cin $end
$var wire 1 ! cout $end
$var wire 4 (# g [3:0] $end
$var wire 1 )# gout $end
$var wire 4 *# p [3:0] $end
$var wire 1 +# pout $end
$var wire 4 ,# sum [3:0] $end
$var wire 3 -# c [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b111 -#
b1111 ,#
0+#
b0 *#
1)#
b1111 (#
1'#
b1111 &#
b1111 %#
b111 $#
b1111 ##
0"#
b0 !#
1~"
b1111 }"
1|"
1{"
b1111 z"
b1111 y"
b111 x"
b1111 w"
0v"
b0 u"
1t"
b1111 s"
1r"
1q"
b1111 p"
b1111 o"
b111 n"
b1111 m"
0l"
b0 k"
1j"
b1111 i"
1h"
b1111 g"
b1111 f"
b1111 e"
b0 d"
b1111111111111111 c"
0b"
1a"
1`"
b111 _"
b1111111111111111 ^"
b1111111111111111 ]"
b111 \"
b1111 ["
0Z"
b0 Y"
1X"
b1111 W"
1V"
b1111 U"
b1111 T"
b111 S"
b1111 R"
0Q"
b0 P"
1O"
b1111 N"
1M"
1L"
b1111 K"
b1111 J"
b111 I"
b1111 H"
0G"
b0 F"
1E"
b1111 D"
1C"
1B"
b1111 A"
b1111 @"
b111 ?"
b1111 >"
0="
b0 <"
1;"
b1111 :"
19"
b1111 8"
b1111 7"
b1111 6"
b0 5"
b1111111111111111 4"
03"
12"
11"
10"
b111 /"
b1111111111111111 ."
b1111111111111111 -"
b111 ,"
b1111 +"
0*"
b0 )"
1("
b1111 '"
1&"
b1111 %"
b1111 $"
b111 #"
b1111 ""
0!"
b0 ~
1}
b1111 |
1{
1z
b1111 y
b1111 x
b111 w
b1111 v
0u
b0 t
1s
b1111 r
1q
1p
b1111 o
b1111 n
b111 m
b1111 l
0k
b0 j
1i
b1111 h
1g
b1111 f
b1111 e
b1111 d
b0 c
b1111111111111111 b
0a
1`
1_
1^
b111 ]
b1111111111111111 \
b1111111111111111 [
b111 Z
b1111 Y
0X
b0 W
1V
b1111 U
1T
b1111 S
b1111 R
b111 Q
b1111 P
0O
b0 N
1M
b1111 L
1K
1J
b1111 I
b1111 H
b111 G
b1111 F
0E
b0 D
1C
b1111 B
1A
1@
b1111 ?
b1111 >
b111 =
b1110 <
0;
b0 :
19
b1111 8
17
b1111 6
b1111 5
b1111 4
b0 3
b1111111111111110 2
01
10
1/
b111 .
b1111111111111111 -
b1111111111111111 ,
b111 +
b1111 *
b0 )
b1111111111111111111111111111111111111111111111111111111111111110 (
b1111111111111111111111111111111111111111111111111111111111111111 '
b1111111111111111111111111111111111111111111111111111111111111111 &
0%
b1111111111111111111111111111111111111111111111111111111111111111 $
b1111111111111111111111111111111111111111111111111111111111111111 #
b1111111111111111111111111111111111111111111111111111111111111110 "
1!
$end
#1000
